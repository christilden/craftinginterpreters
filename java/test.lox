// tests simple expression evaluations and print statements
print "one";
print true;
print 2 + 1;

// tests global and local variable assignment and code blocks
var a = "global a";
var b = "global b";
var c = "global c";
{
    var a = "outer a";
    var b = "outer b";
    {
        var a = "inner a";
        print a;
        print b;
        print c;
    }
    print a;
    print b;
    print c;
}
print a;
print b;
print c;

// tests branching
if (false) print "This should not print.";

// tests branching and code blocks
if (1 == 1 and true) {
    b = "inner b";
    print a;
    print b;
    print c;
}

// tests while loops
var i = 0;
while (i < 5) {
    print i;
    i = i + 1;
}

// for loops
for (var i=0; i<5; i=i+1) {
    print i;
}

// tests function calls!!
fun sayHi(first, last) {
    print "Hi, " + first + " " + last + "!";
}

sayHi("Chris", "Tilden");

// tests expressions, arithmetic, branching, looping, variables, functions,
// function calls, parameter binding, and returns.
fun fibonacci(n) {
    if (n <= 1) return n;
    return fibonacci(n - 2) + fibonacci(n - 1);
}

for (var i = 0; i < 20; i = i + 1) {
    print fibonacci(i);
}

// tests closures
fun makePoint(x, y) {
    fun closure(method) {
        if (method == "x") return x;
        if (method == "y") return y;
        print "unknown method " + method;
    }

    return closure;
}

var point = makePoint(2, 3);
print point("x");
print point("y");

// tests to ensure closures are working properly. this should print "global" twice.

var a = "global";
{
  fun showA() {
    print a;
  }

  showA();
  var a = "block";
  showA();
}

// tests class parsing

class DevonshireCream {
    serveOn() {
        return "Scones";
    }
}

print DevonshireCream;

class Bagel {}
var bagel = Bagel();
print bagel;

// tests class definitions, object instances, and method calls
class Bacon {
    eat() {
        print "Crunch crunch crunch!";
    }
}

Bacon().eat();

// tests 'this' keyword for classes
class Cake {
    taste() {
        var adjective = "delicious";
        print "The " + this.flavor + " cake is " + adjective + "!";
    }
}

var cake = Cake();
cake.flavor = "German chocolate";
cake.taste();

// tests initializers

fun today() {
    return 20180418;
}

class Account {
    init(number, name, dateCreated) {
        this.number = number;
        this.name = name;
        this.dateCreated = dateCreated;
    }

    age() {
        return today() - this.dateCreated;
    }
}

var tildensAccount = Account(1234, "Christopher Tilden", 20180401);
print tildensAccount.age();

// tests inheritance
class Doughnut {
    cook() {
        print "Fry until golden brown.";
    }
}

class BostonCream < Doughnut {
    cook() {
        super.cook();
        print "Pip full of custard and coat with chocolate.";
    }
}

BostonCream().cook();
